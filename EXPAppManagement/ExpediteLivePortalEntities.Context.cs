//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EXPAppManagement
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExpediteTestPortalEntities : DbContext
    {
        public ExpediteTestPortalEntities()
            : base("name=ExpediteTestPortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Nop_Customer> Nop_Customer { get; set; }
        public virtual DbSet<Nop_Order> Nop_Order { get; set; }
        public virtual DbSet<Nop_OrderProductVariant> Nop_OrderProductVariant { get; set; }
        public virtual DbSet<Nop_Product> Nop_Product { get; set; }
        public virtual DbSet<Nop_ProductVariant> Nop_ProductVariant { get; set; }
        public virtual DbSet<SIT_OrderPad> SIT_OrderPad { get; set; }
        public virtual DbSet<Nop_CustomerAttribute> Nop_CustomerAttribute { get; set; }
        public virtual DbSet<Nop_Picture> Nop_Picture { get; set; }
        public virtual DbSet<SIT_CostCentre> SIT_CostCentre { get; set; }
        public virtual DbSet<SIT_Address> SIT_Address { get; set; }
        public virtual DbSet<SIT_Organisation> SIT_Organisation { get; set; }
        public virtual DbSet<SIT_AuthorisationAmounts> SIT_AuthorisationAmounts { get; set; }
        public virtual DbSet<SIT_AuthorisationGroups> SIT_AuthorisationGroups { get; set; }
    
        public virtual ObjectResult<SIT_OrderPad> SIT_OrderPadLoadByCustomerID(Nullable<int> customerId, Nullable<int> mappingTypeId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var mappingTypeIdParameter = mappingTypeId.HasValue ?
                new ObjectParameter("MappingTypeId", mappingTypeId) :
                new ObjectParameter("MappingTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SIT_OrderPad>("SIT_OrderPadLoadByCustomerID", customerIdParameter, mappingTypeIdParameter);
        }
    
        public virtual ObjectResult<SIT_OrderPad> SIT_OrderPadLoadByCustomerID(Nullable<int> customerId, Nullable<int> mappingTypeId, MergeOption mergeOption)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var mappingTypeIdParameter = mappingTypeId.HasValue ?
                new ObjectParameter("MappingTypeId", mappingTypeId) :
                new ObjectParameter("MappingTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SIT_OrderPad>("SIT_OrderPadLoadByCustomerID", mergeOption, customerIdParameter, mappingTypeIdParameter);
        }
    
        public virtual ObjectResult<Nop_ProductVariant> SIT_ProductVariantLoadByOrderPadID(Nullable<int> orderPadID, Nullable<int> mappingTypeId)
        {
            var orderPadIDParameter = orderPadID.HasValue ?
                new ObjectParameter("OrderPadID", orderPadID) :
                new ObjectParameter("OrderPadID", typeof(int));
    
            var mappingTypeIdParameter = mappingTypeId.HasValue ?
                new ObjectParameter("MappingTypeId", mappingTypeId) :
                new ObjectParameter("MappingTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nop_ProductVariant>("SIT_ProductVariantLoadByOrderPadID", orderPadIDParameter, mappingTypeIdParameter);
        }
    
        public virtual ObjectResult<Nop_ProductVariant> SIT_ProductVariantLoadByOrderPadID(Nullable<int> orderPadID, Nullable<int> mappingTypeId, MergeOption mergeOption)
        {
            var orderPadIDParameter = orderPadID.HasValue ?
                new ObjectParameter("OrderPadID", orderPadID) :
                new ObjectParameter("OrderPadID", typeof(int));
    
            var mappingTypeIdParameter = mappingTypeId.HasValue ?
                new ObjectParameter("MappingTypeId", mappingTypeId) :
                new ObjectParameter("MappingTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nop_ProductVariant>("SIT_ProductVariantLoadByOrderPadID", mergeOption, orderPadIDParameter, mappingTypeIdParameter);
        }
    
        public virtual ObjectResult<Nop_ProductVariant> Nop_ProductLoadAllPaged_REST(string categoryId, Nullable<int> manufacturerId, Nullable<int> storeId, Nullable<int> vendorId, Nullable<int> productTagId, Nullable<bool> featuredProducts, Nullable<decimal> priceMin, Nullable<decimal> priceMax, string keywords, Nullable<bool> searchDescriptions, Nullable<bool> searchProductTags, Nullable<bool> useFullTextSearch, Nullable<int> fullTextMode, string filteredSpecs, Nullable<int> languageId, Nullable<int> orderBy, string allowedCustomerRoleIds, Nullable<int> pageIndex, Nullable<int> pageSize, Nullable<bool> showHidden, Nullable<bool> loadFilterableSpecificationAttributeOptionIds)
        {
            var categoryIdParameter = categoryId != null ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(string));
    
            var manufacturerIdParameter = manufacturerId.HasValue ?
                new ObjectParameter("ManufacturerId", manufacturerId) :
                new ObjectParameter("ManufacturerId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var productTagIdParameter = productTagId.HasValue ?
                new ObjectParameter("ProductTagId", productTagId) :
                new ObjectParameter("ProductTagId", typeof(int));
    
            var featuredProductsParameter = featuredProducts.HasValue ?
                new ObjectParameter("FeaturedProducts", featuredProducts) :
                new ObjectParameter("FeaturedProducts", typeof(bool));
    
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("PriceMin", priceMin) :
                new ObjectParameter("PriceMin", typeof(decimal));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("PriceMax", priceMax) :
                new ObjectParameter("PriceMax", typeof(decimal));
    
            var keywordsParameter = keywords != null ?
                new ObjectParameter("Keywords", keywords) :
                new ObjectParameter("Keywords", typeof(string));
    
            var searchDescriptionsParameter = searchDescriptions.HasValue ?
                new ObjectParameter("SearchDescriptions", searchDescriptions) :
                new ObjectParameter("SearchDescriptions", typeof(bool));
    
            var searchProductTagsParameter = searchProductTags.HasValue ?
                new ObjectParameter("SearchProductTags", searchProductTags) :
                new ObjectParameter("SearchProductTags", typeof(bool));
    
            var useFullTextSearchParameter = useFullTextSearch.HasValue ?
                new ObjectParameter("UseFullTextSearch", useFullTextSearch) :
                new ObjectParameter("UseFullTextSearch", typeof(bool));
    
            var fullTextModeParameter = fullTextMode.HasValue ?
                new ObjectParameter("FullTextMode", fullTextMode) :
                new ObjectParameter("FullTextMode", typeof(int));
    
            var filteredSpecsParameter = filteredSpecs != null ?
                new ObjectParameter("FilteredSpecs", filteredSpecs) :
                new ObjectParameter("FilteredSpecs", typeof(string));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var orderByParameter = orderBy.HasValue ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(int));
    
            var allowedCustomerRoleIdsParameter = allowedCustomerRoleIds != null ?
                new ObjectParameter("AllowedCustomerRoleIds", allowedCustomerRoleIds) :
                new ObjectParameter("AllowedCustomerRoleIds", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var showHiddenParameter = showHidden.HasValue ?
                new ObjectParameter("ShowHidden", showHidden) :
                new ObjectParameter("ShowHidden", typeof(bool));
    
            var loadFilterableSpecificationAttributeOptionIdsParameter = loadFilterableSpecificationAttributeOptionIds.HasValue ?
                new ObjectParameter("LoadFilterableSpecificationAttributeOptionIds", loadFilterableSpecificationAttributeOptionIds) :
                new ObjectParameter("LoadFilterableSpecificationAttributeOptionIds", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nop_ProductVariant>("Nop_ProductLoadAllPaged_REST", categoryIdParameter, manufacturerIdParameter, storeIdParameter, vendorIdParameter, productTagIdParameter, featuredProductsParameter, priceMinParameter, priceMaxParameter, keywordsParameter, searchDescriptionsParameter, searchProductTagsParameter, useFullTextSearchParameter, fullTextModeParameter, filteredSpecsParameter, languageIdParameter, orderByParameter, allowedCustomerRoleIdsParameter, pageIndexParameter, pageSizeParameter, showHiddenParameter, loadFilterableSpecificationAttributeOptionIdsParameter);
        }
    
        public virtual ObjectResult<Nop_ProductVariant> Nop_ProductLoadAllPaged_REST(string categoryId, Nullable<int> manufacturerId, Nullable<int> storeId, Nullable<int> vendorId, Nullable<int> productTagId, Nullable<bool> featuredProducts, Nullable<decimal> priceMin, Nullable<decimal> priceMax, string keywords, Nullable<bool> searchDescriptions, Nullable<bool> searchProductTags, Nullable<bool> useFullTextSearch, Nullable<int> fullTextMode, string filteredSpecs, Nullable<int> languageId, Nullable<int> orderBy, string allowedCustomerRoleIds, Nullable<int> pageIndex, Nullable<int> pageSize, Nullable<bool> showHidden, Nullable<bool> loadFilterableSpecificationAttributeOptionIds, MergeOption mergeOption)
        {
            var categoryIdParameter = categoryId != null ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(string));
    
            var manufacturerIdParameter = manufacturerId.HasValue ?
                new ObjectParameter("ManufacturerId", manufacturerId) :
                new ObjectParameter("ManufacturerId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var productTagIdParameter = productTagId.HasValue ?
                new ObjectParameter("ProductTagId", productTagId) :
                new ObjectParameter("ProductTagId", typeof(int));
    
            var featuredProductsParameter = featuredProducts.HasValue ?
                new ObjectParameter("FeaturedProducts", featuredProducts) :
                new ObjectParameter("FeaturedProducts", typeof(bool));
    
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("PriceMin", priceMin) :
                new ObjectParameter("PriceMin", typeof(decimal));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("PriceMax", priceMax) :
                new ObjectParameter("PriceMax", typeof(decimal));
    
            var keywordsParameter = keywords != null ?
                new ObjectParameter("Keywords", keywords) :
                new ObjectParameter("Keywords", typeof(string));
    
            var searchDescriptionsParameter = searchDescriptions.HasValue ?
                new ObjectParameter("SearchDescriptions", searchDescriptions) :
                new ObjectParameter("SearchDescriptions", typeof(bool));
    
            var searchProductTagsParameter = searchProductTags.HasValue ?
                new ObjectParameter("SearchProductTags", searchProductTags) :
                new ObjectParameter("SearchProductTags", typeof(bool));
    
            var useFullTextSearchParameter = useFullTextSearch.HasValue ?
                new ObjectParameter("UseFullTextSearch", useFullTextSearch) :
                new ObjectParameter("UseFullTextSearch", typeof(bool));
    
            var fullTextModeParameter = fullTextMode.HasValue ?
                new ObjectParameter("FullTextMode", fullTextMode) :
                new ObjectParameter("FullTextMode", typeof(int));
    
            var filteredSpecsParameter = filteredSpecs != null ?
                new ObjectParameter("FilteredSpecs", filteredSpecs) :
                new ObjectParameter("FilteredSpecs", typeof(string));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var orderByParameter = orderBy.HasValue ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(int));
    
            var allowedCustomerRoleIdsParameter = allowedCustomerRoleIds != null ?
                new ObjectParameter("AllowedCustomerRoleIds", allowedCustomerRoleIds) :
                new ObjectParameter("AllowedCustomerRoleIds", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var showHiddenParameter = showHidden.HasValue ?
                new ObjectParameter("ShowHidden", showHidden) :
                new ObjectParameter("ShowHidden", typeof(bool));
    
            var loadFilterableSpecificationAttributeOptionIdsParameter = loadFilterableSpecificationAttributeOptionIds.HasValue ?
                new ObjectParameter("LoadFilterableSpecificationAttributeOptionIds", loadFilterableSpecificationAttributeOptionIds) :
                new ObjectParameter("LoadFilterableSpecificationAttributeOptionIds", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nop_ProductVariant>("Nop_ProductLoadAllPaged_REST", mergeOption, categoryIdParameter, manufacturerIdParameter, storeIdParameter, vendorIdParameter, productTagIdParameter, featuredProductsParameter, priceMinParameter, priceMaxParameter, keywordsParameter, searchDescriptionsParameter, searchProductTagsParameter, useFullTextSearchParameter, fullTextModeParameter, filteredSpecsParameter, languageIdParameter, orderByParameter, allowedCustomerRoleIdsParameter, pageIndexParameter, pageSizeParameter, showHiddenParameter, loadFilterableSpecificationAttributeOptionIdsParameter);
        }
    
        public virtual int Nop_OrderInsert(ObjectParameter orderID, Nullable<System.Guid> orderGUID, Nullable<int> customerID, Nullable<int> customerLanguageID, Nullable<int> customerTaxDisplayTypeID, string customerIP, Nullable<decimal> orderSubtotalInclTax, Nullable<decimal> orderSubtotalExclTax, Nullable<decimal> orderShippingInclTax, Nullable<decimal> orderShippingExclTax, Nullable<decimal> paymentMethodAdditionalFeeInclTax, Nullable<decimal> paymentMethodAdditionalFeeExclTax, Nullable<decimal> orderTax, Nullable<decimal> orderTotal, Nullable<decimal> orderDiscount, Nullable<decimal> orderSubtotalInclTaxInCustomerCurrency, Nullable<decimal> orderSubtotalExclTaxInCustomerCurrency, Nullable<decimal> orderShippingInclTaxInCustomerCurrency, Nullable<decimal> orderShippingExclTaxInCustomerCurrency, Nullable<decimal> paymentMethodAdditionalFeeInclTaxInCustomerCurrency, Nullable<decimal> paymentMethodAdditionalFeeExclTaxInCustomerCurrency, Nullable<decimal> orderTaxInCustomerCurrency, Nullable<decimal> orderTotalInCustomerCurrency, Nullable<decimal> orderDiscountInCustomerCurrency, string checkoutAttributeDescription, string checkoutAttributesXML, string customerCurrencyCode, Nullable<double> orderWeight, Nullable<int> affiliateID, Nullable<int> orderStatusID, Nullable<bool> allowStoringCreditCardNumber, string cardType, string cardName, string cardNumber, string maskedCreditCardNumber, string cardCVV2, string cardExpirationMonth, string cardExpirationYear, Nullable<int> paymentMethodID, string paymentMethodName, string authorizationTransactionID, string authorizationTransactionCode, string authorizationTransactionResult, string captureTransactionID, string captureTransactionResult, string subscriptionTransactionID, string purchaseOrderNumber, Nullable<int> paymentStatusID, Nullable<System.DateTime> paidDate, string billingFirstName, string billingLastName, string billingPhoneNumber, string billingEmail, string billingFaxNumber, string billingCompany, string billingAddress1, string billingAddress2, string billingCity, string billingStateProvince, Nullable<int> billingStateProvinceID, string billingZipPostalCode, string billingCountry, Nullable<int> billingCountryID, Nullable<int> shippingStatusID, string shippingFirstName, string shippingLastName, string shippingPhoneNumber, string shippingEmail, string shippingFaxNumber, string shippingCompany, string shippingAddress1, string shippingAddress2, string shippingCity, string shippingStateProvince, Nullable<int> shippingStateProvinceID, string shippingZipPostalCode, string shippingCountry, Nullable<int> shippingCountryID, string shippingMethod, Nullable<int> shippingRateComputationMethodID, Nullable<System.DateTime> shippedDate, Nullable<System.DateTime> deliveryDate, string trackingNumber, Nullable<bool> deleted, Nullable<System.DateTime> createdOn, string employeeName)
        {
            var orderGUIDParameter = orderGUID.HasValue ?
                new ObjectParameter("OrderGUID", orderGUID) :
                new ObjectParameter("OrderGUID", typeof(System.Guid));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerLanguageIDParameter = customerLanguageID.HasValue ?
                new ObjectParameter("CustomerLanguageID", customerLanguageID) :
                new ObjectParameter("CustomerLanguageID", typeof(int));
    
            var customerTaxDisplayTypeIDParameter = customerTaxDisplayTypeID.HasValue ?
                new ObjectParameter("CustomerTaxDisplayTypeID", customerTaxDisplayTypeID) :
                new ObjectParameter("CustomerTaxDisplayTypeID", typeof(int));
    
            var customerIPParameter = customerIP != null ?
                new ObjectParameter("CustomerIP", customerIP) :
                new ObjectParameter("CustomerIP", typeof(string));
    
            var orderSubtotalInclTaxParameter = orderSubtotalInclTax.HasValue ?
                new ObjectParameter("OrderSubtotalInclTax", orderSubtotalInclTax) :
                new ObjectParameter("OrderSubtotalInclTax", typeof(decimal));
    
            var orderSubtotalExclTaxParameter = orderSubtotalExclTax.HasValue ?
                new ObjectParameter("OrderSubtotalExclTax", orderSubtotalExclTax) :
                new ObjectParameter("OrderSubtotalExclTax", typeof(decimal));
    
            var orderShippingInclTaxParameter = orderShippingInclTax.HasValue ?
                new ObjectParameter("OrderShippingInclTax", orderShippingInclTax) :
                new ObjectParameter("OrderShippingInclTax", typeof(decimal));
    
            var orderShippingExclTaxParameter = orderShippingExclTax.HasValue ?
                new ObjectParameter("OrderShippingExclTax", orderShippingExclTax) :
                new ObjectParameter("OrderShippingExclTax", typeof(decimal));
    
            var paymentMethodAdditionalFeeInclTaxParameter = paymentMethodAdditionalFeeInclTax.HasValue ?
                new ObjectParameter("PaymentMethodAdditionalFeeInclTax", paymentMethodAdditionalFeeInclTax) :
                new ObjectParameter("PaymentMethodAdditionalFeeInclTax", typeof(decimal));
    
            var paymentMethodAdditionalFeeExclTaxParameter = paymentMethodAdditionalFeeExclTax.HasValue ?
                new ObjectParameter("PaymentMethodAdditionalFeeExclTax", paymentMethodAdditionalFeeExclTax) :
                new ObjectParameter("PaymentMethodAdditionalFeeExclTax", typeof(decimal));
    
            var orderTaxParameter = orderTax.HasValue ?
                new ObjectParameter("OrderTax", orderTax) :
                new ObjectParameter("OrderTax", typeof(decimal));
    
            var orderTotalParameter = orderTotal.HasValue ?
                new ObjectParameter("OrderTotal", orderTotal) :
                new ObjectParameter("OrderTotal", typeof(decimal));
    
            var orderDiscountParameter = orderDiscount.HasValue ?
                new ObjectParameter("OrderDiscount", orderDiscount) :
                new ObjectParameter("OrderDiscount", typeof(decimal));
    
            var orderSubtotalInclTaxInCustomerCurrencyParameter = orderSubtotalInclTaxInCustomerCurrency.HasValue ?
                new ObjectParameter("OrderSubtotalInclTaxInCustomerCurrency", orderSubtotalInclTaxInCustomerCurrency) :
                new ObjectParameter("OrderSubtotalInclTaxInCustomerCurrency", typeof(decimal));
    
            var orderSubtotalExclTaxInCustomerCurrencyParameter = orderSubtotalExclTaxInCustomerCurrency.HasValue ?
                new ObjectParameter("OrderSubtotalExclTaxInCustomerCurrency", orderSubtotalExclTaxInCustomerCurrency) :
                new ObjectParameter("OrderSubtotalExclTaxInCustomerCurrency", typeof(decimal));
    
            var orderShippingInclTaxInCustomerCurrencyParameter = orderShippingInclTaxInCustomerCurrency.HasValue ?
                new ObjectParameter("OrderShippingInclTaxInCustomerCurrency", orderShippingInclTaxInCustomerCurrency) :
                new ObjectParameter("OrderShippingInclTaxInCustomerCurrency", typeof(decimal));
    
            var orderShippingExclTaxInCustomerCurrencyParameter = orderShippingExclTaxInCustomerCurrency.HasValue ?
                new ObjectParameter("OrderShippingExclTaxInCustomerCurrency", orderShippingExclTaxInCustomerCurrency) :
                new ObjectParameter("OrderShippingExclTaxInCustomerCurrency", typeof(decimal));
    
            var paymentMethodAdditionalFeeInclTaxInCustomerCurrencyParameter = paymentMethodAdditionalFeeInclTaxInCustomerCurrency.HasValue ?
                new ObjectParameter("PaymentMethodAdditionalFeeInclTaxInCustomerCurrency", paymentMethodAdditionalFeeInclTaxInCustomerCurrency) :
                new ObjectParameter("PaymentMethodAdditionalFeeInclTaxInCustomerCurrency", typeof(decimal));
    
            var paymentMethodAdditionalFeeExclTaxInCustomerCurrencyParameter = paymentMethodAdditionalFeeExclTaxInCustomerCurrency.HasValue ?
                new ObjectParameter("PaymentMethodAdditionalFeeExclTaxInCustomerCurrency", paymentMethodAdditionalFeeExclTaxInCustomerCurrency) :
                new ObjectParameter("PaymentMethodAdditionalFeeExclTaxInCustomerCurrency", typeof(decimal));
    
            var orderTaxInCustomerCurrencyParameter = orderTaxInCustomerCurrency.HasValue ?
                new ObjectParameter("OrderTaxInCustomerCurrency", orderTaxInCustomerCurrency) :
                new ObjectParameter("OrderTaxInCustomerCurrency", typeof(decimal));
    
            var orderTotalInCustomerCurrencyParameter = orderTotalInCustomerCurrency.HasValue ?
                new ObjectParameter("OrderTotalInCustomerCurrency", orderTotalInCustomerCurrency) :
                new ObjectParameter("OrderTotalInCustomerCurrency", typeof(decimal));
    
            var orderDiscountInCustomerCurrencyParameter = orderDiscountInCustomerCurrency.HasValue ?
                new ObjectParameter("OrderDiscountInCustomerCurrency", orderDiscountInCustomerCurrency) :
                new ObjectParameter("OrderDiscountInCustomerCurrency", typeof(decimal));
    
            var checkoutAttributeDescriptionParameter = checkoutAttributeDescription != null ?
                new ObjectParameter("CheckoutAttributeDescription", checkoutAttributeDescription) :
                new ObjectParameter("CheckoutAttributeDescription", typeof(string));
    
            var checkoutAttributesXMLParameter = checkoutAttributesXML != null ?
                new ObjectParameter("CheckoutAttributesXML", checkoutAttributesXML) :
                new ObjectParameter("CheckoutAttributesXML", typeof(string));
    
            var customerCurrencyCodeParameter = customerCurrencyCode != null ?
                new ObjectParameter("CustomerCurrencyCode", customerCurrencyCode) :
                new ObjectParameter("CustomerCurrencyCode", typeof(string));
    
            var orderWeightParameter = orderWeight.HasValue ?
                new ObjectParameter("OrderWeight", orderWeight) :
                new ObjectParameter("OrderWeight", typeof(double));
    
            var affiliateIDParameter = affiliateID.HasValue ?
                new ObjectParameter("AffiliateID", affiliateID) :
                new ObjectParameter("AffiliateID", typeof(int));
    
            var orderStatusIDParameter = orderStatusID.HasValue ?
                new ObjectParameter("OrderStatusID", orderStatusID) :
                new ObjectParameter("OrderStatusID", typeof(int));
    
            var allowStoringCreditCardNumberParameter = allowStoringCreditCardNumber.HasValue ?
                new ObjectParameter("AllowStoringCreditCardNumber", allowStoringCreditCardNumber) :
                new ObjectParameter("AllowStoringCreditCardNumber", typeof(bool));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNameParameter = cardName != null ?
                new ObjectParameter("CardName", cardName) :
                new ObjectParameter("CardName", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var maskedCreditCardNumberParameter = maskedCreditCardNumber != null ?
                new ObjectParameter("MaskedCreditCardNumber", maskedCreditCardNumber) :
                new ObjectParameter("MaskedCreditCardNumber", typeof(string));
    
            var cardCVV2Parameter = cardCVV2 != null ?
                new ObjectParameter("CardCVV2", cardCVV2) :
                new ObjectParameter("CardCVV2", typeof(string));
    
            var cardExpirationMonthParameter = cardExpirationMonth != null ?
                new ObjectParameter("CardExpirationMonth", cardExpirationMonth) :
                new ObjectParameter("CardExpirationMonth", typeof(string));
    
            var cardExpirationYearParameter = cardExpirationYear != null ?
                new ObjectParameter("CardExpirationYear", cardExpirationYear) :
                new ObjectParameter("CardExpirationYear", typeof(string));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var paymentMethodNameParameter = paymentMethodName != null ?
                new ObjectParameter("PaymentMethodName", paymentMethodName) :
                new ObjectParameter("PaymentMethodName", typeof(string));
    
            var authorizationTransactionIDParameter = authorizationTransactionID != null ?
                new ObjectParameter("AuthorizationTransactionID", authorizationTransactionID) :
                new ObjectParameter("AuthorizationTransactionID", typeof(string));
    
            var authorizationTransactionCodeParameter = authorizationTransactionCode != null ?
                new ObjectParameter("AuthorizationTransactionCode", authorizationTransactionCode) :
                new ObjectParameter("AuthorizationTransactionCode", typeof(string));
    
            var authorizationTransactionResultParameter = authorizationTransactionResult != null ?
                new ObjectParameter("AuthorizationTransactionResult", authorizationTransactionResult) :
                new ObjectParameter("AuthorizationTransactionResult", typeof(string));
    
            var captureTransactionIDParameter = captureTransactionID != null ?
                new ObjectParameter("CaptureTransactionID", captureTransactionID) :
                new ObjectParameter("CaptureTransactionID", typeof(string));
    
            var captureTransactionResultParameter = captureTransactionResult != null ?
                new ObjectParameter("CaptureTransactionResult", captureTransactionResult) :
                new ObjectParameter("CaptureTransactionResult", typeof(string));
    
            var subscriptionTransactionIDParameter = subscriptionTransactionID != null ?
                new ObjectParameter("SubscriptionTransactionID", subscriptionTransactionID) :
                new ObjectParameter("SubscriptionTransactionID", typeof(string));
    
            var purchaseOrderNumberParameter = purchaseOrderNumber != null ?
                new ObjectParameter("PurchaseOrderNumber", purchaseOrderNumber) :
                new ObjectParameter("PurchaseOrderNumber", typeof(string));
    
            var paymentStatusIDParameter = paymentStatusID.HasValue ?
                new ObjectParameter("PaymentStatusID", paymentStatusID) :
                new ObjectParameter("PaymentStatusID", typeof(int));
    
            var paidDateParameter = paidDate.HasValue ?
                new ObjectParameter("PaidDate", paidDate) :
                new ObjectParameter("PaidDate", typeof(System.DateTime));
    
            var billingFirstNameParameter = billingFirstName != null ?
                new ObjectParameter("BillingFirstName", billingFirstName) :
                new ObjectParameter("BillingFirstName", typeof(string));
    
            var billingLastNameParameter = billingLastName != null ?
                new ObjectParameter("BillingLastName", billingLastName) :
                new ObjectParameter("BillingLastName", typeof(string));
    
            var billingPhoneNumberParameter = billingPhoneNumber != null ?
                new ObjectParameter("BillingPhoneNumber", billingPhoneNumber) :
                new ObjectParameter("BillingPhoneNumber", typeof(string));
    
            var billingEmailParameter = billingEmail != null ?
                new ObjectParameter("BillingEmail", billingEmail) :
                new ObjectParameter("BillingEmail", typeof(string));
    
            var billingFaxNumberParameter = billingFaxNumber != null ?
                new ObjectParameter("BillingFaxNumber", billingFaxNumber) :
                new ObjectParameter("BillingFaxNumber", typeof(string));
    
            var billingCompanyParameter = billingCompany != null ?
                new ObjectParameter("BillingCompany", billingCompany) :
                new ObjectParameter("BillingCompany", typeof(string));
    
            var billingAddress1Parameter = billingAddress1 != null ?
                new ObjectParameter("BillingAddress1", billingAddress1) :
                new ObjectParameter("BillingAddress1", typeof(string));
    
            var billingAddress2Parameter = billingAddress2 != null ?
                new ObjectParameter("BillingAddress2", billingAddress2) :
                new ObjectParameter("BillingAddress2", typeof(string));
    
            var billingCityParameter = billingCity != null ?
                new ObjectParameter("BillingCity", billingCity) :
                new ObjectParameter("BillingCity", typeof(string));
    
            var billingStateProvinceParameter = billingStateProvince != null ?
                new ObjectParameter("BillingStateProvince", billingStateProvince) :
                new ObjectParameter("BillingStateProvince", typeof(string));
    
            var billingStateProvinceIDParameter = billingStateProvinceID.HasValue ?
                new ObjectParameter("BillingStateProvinceID", billingStateProvinceID) :
                new ObjectParameter("BillingStateProvinceID", typeof(int));
    
            var billingZipPostalCodeParameter = billingZipPostalCode != null ?
                new ObjectParameter("BillingZipPostalCode", billingZipPostalCode) :
                new ObjectParameter("BillingZipPostalCode", typeof(string));
    
            var billingCountryParameter = billingCountry != null ?
                new ObjectParameter("BillingCountry", billingCountry) :
                new ObjectParameter("BillingCountry", typeof(string));
    
            var billingCountryIDParameter = billingCountryID.HasValue ?
                new ObjectParameter("BillingCountryID", billingCountryID) :
                new ObjectParameter("BillingCountryID", typeof(int));
    
            var shippingStatusIDParameter = shippingStatusID.HasValue ?
                new ObjectParameter("ShippingStatusID", shippingStatusID) :
                new ObjectParameter("ShippingStatusID", typeof(int));
    
            var shippingFirstNameParameter = shippingFirstName != null ?
                new ObjectParameter("ShippingFirstName", shippingFirstName) :
                new ObjectParameter("ShippingFirstName", typeof(string));
    
            var shippingLastNameParameter = shippingLastName != null ?
                new ObjectParameter("ShippingLastName", shippingLastName) :
                new ObjectParameter("ShippingLastName", typeof(string));
    
            var shippingPhoneNumberParameter = shippingPhoneNumber != null ?
                new ObjectParameter("ShippingPhoneNumber", shippingPhoneNumber) :
                new ObjectParameter("ShippingPhoneNumber", typeof(string));
    
            var shippingEmailParameter = shippingEmail != null ?
                new ObjectParameter("ShippingEmail", shippingEmail) :
                new ObjectParameter("ShippingEmail", typeof(string));
    
            var shippingFaxNumberParameter = shippingFaxNumber != null ?
                new ObjectParameter("ShippingFaxNumber", shippingFaxNumber) :
                new ObjectParameter("ShippingFaxNumber", typeof(string));
    
            var shippingCompanyParameter = shippingCompany != null ?
                new ObjectParameter("ShippingCompany", shippingCompany) :
                new ObjectParameter("ShippingCompany", typeof(string));
    
            var shippingAddress1Parameter = shippingAddress1 != null ?
                new ObjectParameter("ShippingAddress1", shippingAddress1) :
                new ObjectParameter("ShippingAddress1", typeof(string));
    
            var shippingAddress2Parameter = shippingAddress2 != null ?
                new ObjectParameter("ShippingAddress2", shippingAddress2) :
                new ObjectParameter("ShippingAddress2", typeof(string));
    
            var shippingCityParameter = shippingCity != null ?
                new ObjectParameter("ShippingCity", shippingCity) :
                new ObjectParameter("ShippingCity", typeof(string));
    
            var shippingStateProvinceParameter = shippingStateProvince != null ?
                new ObjectParameter("ShippingStateProvince", shippingStateProvince) :
                new ObjectParameter("ShippingStateProvince", typeof(string));
    
            var shippingStateProvinceIDParameter = shippingStateProvinceID.HasValue ?
                new ObjectParameter("ShippingStateProvinceID", shippingStateProvinceID) :
                new ObjectParameter("ShippingStateProvinceID", typeof(int));
    
            var shippingZipPostalCodeParameter = shippingZipPostalCode != null ?
                new ObjectParameter("ShippingZipPostalCode", shippingZipPostalCode) :
                new ObjectParameter("ShippingZipPostalCode", typeof(string));
    
            var shippingCountryParameter = shippingCountry != null ?
                new ObjectParameter("ShippingCountry", shippingCountry) :
                new ObjectParameter("ShippingCountry", typeof(string));
    
            var shippingCountryIDParameter = shippingCountryID.HasValue ?
                new ObjectParameter("ShippingCountryID", shippingCountryID) :
                new ObjectParameter("ShippingCountryID", typeof(int));
    
            var shippingMethodParameter = shippingMethod != null ?
                new ObjectParameter("ShippingMethod", shippingMethod) :
                new ObjectParameter("ShippingMethod", typeof(string));
    
            var shippingRateComputationMethodIDParameter = shippingRateComputationMethodID.HasValue ?
                new ObjectParameter("ShippingRateComputationMethodID", shippingRateComputationMethodID) :
                new ObjectParameter("ShippingRateComputationMethodID", typeof(int));
    
            var shippedDateParameter = shippedDate.HasValue ?
                new ObjectParameter("ShippedDate", shippedDate) :
                new ObjectParameter("ShippedDate", typeof(System.DateTime));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var trackingNumberParameter = trackingNumber != null ?
                new ObjectParameter("TrackingNumber", trackingNumber) :
                new ObjectParameter("TrackingNumber", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nop_OrderInsert", orderID, orderGUIDParameter, customerIDParameter, customerLanguageIDParameter, customerTaxDisplayTypeIDParameter, customerIPParameter, orderSubtotalInclTaxParameter, orderSubtotalExclTaxParameter, orderShippingInclTaxParameter, orderShippingExclTaxParameter, paymentMethodAdditionalFeeInclTaxParameter, paymentMethodAdditionalFeeExclTaxParameter, orderTaxParameter, orderTotalParameter, orderDiscountParameter, orderSubtotalInclTaxInCustomerCurrencyParameter, orderSubtotalExclTaxInCustomerCurrencyParameter, orderShippingInclTaxInCustomerCurrencyParameter, orderShippingExclTaxInCustomerCurrencyParameter, paymentMethodAdditionalFeeInclTaxInCustomerCurrencyParameter, paymentMethodAdditionalFeeExclTaxInCustomerCurrencyParameter, orderTaxInCustomerCurrencyParameter, orderTotalInCustomerCurrencyParameter, orderDiscountInCustomerCurrencyParameter, checkoutAttributeDescriptionParameter, checkoutAttributesXMLParameter, customerCurrencyCodeParameter, orderWeightParameter, affiliateIDParameter, orderStatusIDParameter, allowStoringCreditCardNumberParameter, cardTypeParameter, cardNameParameter, cardNumberParameter, maskedCreditCardNumberParameter, cardCVV2Parameter, cardExpirationMonthParameter, cardExpirationYearParameter, paymentMethodIDParameter, paymentMethodNameParameter, authorizationTransactionIDParameter, authorizationTransactionCodeParameter, authorizationTransactionResultParameter, captureTransactionIDParameter, captureTransactionResultParameter, subscriptionTransactionIDParameter, purchaseOrderNumberParameter, paymentStatusIDParameter, paidDateParameter, billingFirstNameParameter, billingLastNameParameter, billingPhoneNumberParameter, billingEmailParameter, billingFaxNumberParameter, billingCompanyParameter, billingAddress1Parameter, billingAddress2Parameter, billingCityParameter, billingStateProvinceParameter, billingStateProvinceIDParameter, billingZipPostalCodeParameter, billingCountryParameter, billingCountryIDParameter, shippingStatusIDParameter, shippingFirstNameParameter, shippingLastNameParameter, shippingPhoneNumberParameter, shippingEmailParameter, shippingFaxNumberParameter, shippingCompanyParameter, shippingAddress1Parameter, shippingAddress2Parameter, shippingCityParameter, shippingStateProvinceParameter, shippingStateProvinceIDParameter, shippingZipPostalCodeParameter, shippingCountryParameter, shippingCountryIDParameter, shippingMethodParameter, shippingRateComputationMethodIDParameter, shippedDateParameter, deliveryDateParameter, trackingNumberParameter, deletedParameter, createdOnParameter, employeeNameParameter);
        }
    
        public virtual int Nop_OrderProductVariantInsert(ObjectParameter orderProductVariantID, Nullable<System.Guid> orderProductVariantGUID, Nullable<int> orderID, Nullable<int> productVariantID, Nullable<decimal> unitPriceInclTax, Nullable<decimal> unitPriceExclTax, Nullable<decimal> priceInclTax, Nullable<decimal> priceExclTax, Nullable<decimal> unitPriceInclTaxInCustomerCurrency, Nullable<decimal> unitPriceExclTaxInCustomerCurrency, Nullable<decimal> priceInclTaxInCustomerCurrency, Nullable<decimal> priceExclTaxInCustomerCurrency, string attributeDescription, string attributesXML, Nullable<int> quantity, Nullable<decimal> discountAmountInclTax, Nullable<decimal> discountAmountExclTax, Nullable<int> downloadCount, Nullable<bool> isDownloadActivated, Nullable<int> licenseDownloadID, Nullable<int> costCentreID, string employeeName)
        {
            var orderProductVariantGUIDParameter = orderProductVariantGUID.HasValue ?
                new ObjectParameter("OrderProductVariantGUID", orderProductVariantGUID) :
                new ObjectParameter("OrderProductVariantGUID", typeof(System.Guid));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var productVariantIDParameter = productVariantID.HasValue ?
                new ObjectParameter("ProductVariantID", productVariantID) :
                new ObjectParameter("ProductVariantID", typeof(int));
    
            var unitPriceInclTaxParameter = unitPriceInclTax.HasValue ?
                new ObjectParameter("UnitPriceInclTax", unitPriceInclTax) :
                new ObjectParameter("UnitPriceInclTax", typeof(decimal));
    
            var unitPriceExclTaxParameter = unitPriceExclTax.HasValue ?
                new ObjectParameter("UnitPriceExclTax", unitPriceExclTax) :
                new ObjectParameter("UnitPriceExclTax", typeof(decimal));
    
            var priceInclTaxParameter = priceInclTax.HasValue ?
                new ObjectParameter("PriceInclTax", priceInclTax) :
                new ObjectParameter("PriceInclTax", typeof(decimal));
    
            var priceExclTaxParameter = priceExclTax.HasValue ?
                new ObjectParameter("PriceExclTax", priceExclTax) :
                new ObjectParameter("PriceExclTax", typeof(decimal));
    
            var unitPriceInclTaxInCustomerCurrencyParameter = unitPriceInclTaxInCustomerCurrency.HasValue ?
                new ObjectParameter("UnitPriceInclTaxInCustomerCurrency", unitPriceInclTaxInCustomerCurrency) :
                new ObjectParameter("UnitPriceInclTaxInCustomerCurrency", typeof(decimal));
    
            var unitPriceExclTaxInCustomerCurrencyParameter = unitPriceExclTaxInCustomerCurrency.HasValue ?
                new ObjectParameter("UnitPriceExclTaxInCustomerCurrency", unitPriceExclTaxInCustomerCurrency) :
                new ObjectParameter("UnitPriceExclTaxInCustomerCurrency", typeof(decimal));
    
            var priceInclTaxInCustomerCurrencyParameter = priceInclTaxInCustomerCurrency.HasValue ?
                new ObjectParameter("PriceInclTaxInCustomerCurrency", priceInclTaxInCustomerCurrency) :
                new ObjectParameter("PriceInclTaxInCustomerCurrency", typeof(decimal));
    
            var priceExclTaxInCustomerCurrencyParameter = priceExclTaxInCustomerCurrency.HasValue ?
                new ObjectParameter("PriceExclTaxInCustomerCurrency", priceExclTaxInCustomerCurrency) :
                new ObjectParameter("PriceExclTaxInCustomerCurrency", typeof(decimal));
    
            var attributeDescriptionParameter = attributeDescription != null ?
                new ObjectParameter("AttributeDescription", attributeDescription) :
                new ObjectParameter("AttributeDescription", typeof(string));
    
            var attributesXMLParameter = attributesXML != null ?
                new ObjectParameter("AttributesXML", attributesXML) :
                new ObjectParameter("AttributesXML", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var discountAmountInclTaxParameter = discountAmountInclTax.HasValue ?
                new ObjectParameter("DiscountAmountInclTax", discountAmountInclTax) :
                new ObjectParameter("DiscountAmountInclTax", typeof(decimal));
    
            var discountAmountExclTaxParameter = discountAmountExclTax.HasValue ?
                new ObjectParameter("DiscountAmountExclTax", discountAmountExclTax) :
                new ObjectParameter("DiscountAmountExclTax", typeof(decimal));
    
            var downloadCountParameter = downloadCount.HasValue ?
                new ObjectParameter("DownloadCount", downloadCount) :
                new ObjectParameter("DownloadCount", typeof(int));
    
            var isDownloadActivatedParameter = isDownloadActivated.HasValue ?
                new ObjectParameter("IsDownloadActivated", isDownloadActivated) :
                new ObjectParameter("IsDownloadActivated", typeof(bool));
    
            var licenseDownloadIDParameter = licenseDownloadID.HasValue ?
                new ObjectParameter("LicenseDownloadID", licenseDownloadID) :
                new ObjectParameter("LicenseDownloadID", typeof(int));
    
            var costCentreIDParameter = costCentreID.HasValue ?
                new ObjectParameter("CostCentreID", costCentreID) :
                new ObjectParameter("CostCentreID", typeof(int));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nop_OrderProductVariantInsert", orderProductVariantID, orderProductVariantGUIDParameter, orderIDParameter, productVariantIDParameter, unitPriceInclTaxParameter, unitPriceExclTaxParameter, priceInclTaxParameter, priceExclTaxParameter, unitPriceInclTaxInCustomerCurrencyParameter, unitPriceExclTaxInCustomerCurrencyParameter, priceInclTaxInCustomerCurrencyParameter, priceExclTaxInCustomerCurrencyParameter, attributeDescriptionParameter, attributesXMLParameter, quantityParameter, discountAmountInclTaxParameter, discountAmountExclTaxParameter, downloadCountParameter, isDownloadActivatedParameter, licenseDownloadIDParameter, costCentreIDParameter, employeeNameParameter);
        }
    
        public virtual int SIT_GetSalePrice(ObjectParameter price, Nullable<int> organisationID, Nullable<int> profileId, Nullable<int> addressID, Nullable<System.DateTime> priceDate, Nullable<int> productVariantID, Nullable<int> mappingTypeID, Nullable<int> tradePriceCalcType, Nullable<bool> saveCalculatedPrice)
        {
            var organisationIDParameter = organisationID.HasValue ?
                new ObjectParameter("OrganisationID", organisationID) :
                new ObjectParameter("OrganisationID", typeof(int));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var priceDateParameter = priceDate.HasValue ?
                new ObjectParameter("PriceDate", priceDate) :
                new ObjectParameter("PriceDate", typeof(System.DateTime));
    
            var productVariantIDParameter = productVariantID.HasValue ?
                new ObjectParameter("ProductVariantID", productVariantID) :
                new ObjectParameter("ProductVariantID", typeof(int));
    
            var mappingTypeIDParameter = mappingTypeID.HasValue ?
                new ObjectParameter("MappingTypeID", mappingTypeID) :
                new ObjectParameter("MappingTypeID", typeof(int));
    
            var tradePriceCalcTypeParameter = tradePriceCalcType.HasValue ?
                new ObjectParameter("TradePriceCalcType", tradePriceCalcType) :
                new ObjectParameter("TradePriceCalcType", typeof(int));
    
            var saveCalculatedPriceParameter = saveCalculatedPrice.HasValue ?
                new ObjectParameter("SaveCalculatedPrice", saveCalculatedPrice) :
                new ObjectParameter("SaveCalculatedPrice", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SIT_GetSalePrice", price, organisationIDParameter, profileIdParameter, addressIDParameter, priceDateParameter, productVariantIDParameter, mappingTypeIDParameter, tradePriceCalcTypeParameter, saveCalculatedPriceParameter);
        }
    
        public virtual ObjectResult<SIT_CostCentre> SIT_CostCentreLoadByCustomerID(Nullable<int> customerId, Nullable<int> mappingTypeId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var mappingTypeIdParameter = mappingTypeId.HasValue ?
                new ObjectParameter("MappingTypeId", mappingTypeId) :
                new ObjectParameter("MappingTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SIT_CostCentre>("SIT_CostCentreLoadByCustomerID", customerIdParameter, mappingTypeIdParameter);
        }
    
        public virtual ObjectResult<SIT_CostCentre> SIT_CostCentreLoadByCustomerID(Nullable<int> customerId, Nullable<int> mappingTypeId, MergeOption mergeOption)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var mappingTypeIdParameter = mappingTypeId.HasValue ?
                new ObjectParameter("MappingTypeId", mappingTypeId) :
                new ObjectParameter("MappingTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SIT_CostCentre>("SIT_CostCentreLoadByCustomerID", mergeOption, customerIdParameter, mappingTypeIdParameter);
        }
    
        public virtual ObjectResult<SIT_Address> SIT_AddressesForUser(Nullable<int> organisationId, Nullable<int> mappingTypeId, Nullable<int> customerId)
        {
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("OrganisationId", organisationId) :
                new ObjectParameter("OrganisationId", typeof(int));
    
            var mappingTypeIdParameter = mappingTypeId.HasValue ?
                new ObjectParameter("MappingTypeId", mappingTypeId) :
                new ObjectParameter("MappingTypeId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SIT_Address>("SIT_AddressesForUser", organisationIdParameter, mappingTypeIdParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<SIT_Address> SIT_AddressesForUser(Nullable<int> organisationId, Nullable<int> mappingTypeId, Nullable<int> customerId, MergeOption mergeOption)
        {
            var organisationIdParameter = organisationId.HasValue ?
                new ObjectParameter("OrganisationId", organisationId) :
                new ObjectParameter("OrganisationId", typeof(int));
    
            var mappingTypeIdParameter = mappingTypeId.HasValue ?
                new ObjectParameter("MappingTypeId", mappingTypeId) :
                new ObjectParameter("MappingTypeId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SIT_Address>("SIT_AddressesForUser", mergeOption, organisationIdParameter, mappingTypeIdParameter, customerIdParameter);
        }
    }
}
